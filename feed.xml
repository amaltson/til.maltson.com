<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <description>Microblog of something technical I learned today.
</description>
    <link>http://til.maltson.com/</link>
    <atom:link href="http://til.maltson.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Nov 2015 09:55:10 -0500</pubDate>
    <lastBuildDate>Fri, 27 Nov 2015 09:55:10 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Rendering Tweets in Jekyll/Octopress</title>
        <description>&lt;p&gt;In my &lt;a href=&quot;http://til.maltson.com/2015/11/24/changing-base-templates-in-octopress.html&quot;&gt;previous TIL&lt;/a&gt; I wanted to render a tweet I had made about Octopress. I
thought, surely there’s a way to do this in Jekyll. With the right keyword
searches on Google, I came across &lt;a href=&quot;https://github.com/rob-murray/jekyll-twitter-plugin&quot;&gt;jekyll-twitter-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After adding &lt;code&gt;jekyll-twitter-plugin&lt;/code&gt; to the &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;_config.yml&lt;/code&gt;, you
need to go and get some Twitter API keys. Make sure not to commit these keys
to source control, I opted for the environment variable approach. With that in
place, you can now add a tweet with a simple &lt;code&gt;liquid&lt;/code&gt; tag like so:&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;div class=&quot;embed twitter&quot;&gt;&lt;p&gt;There was a &#39;Twitter::Error::NotFound&#39; error fetching Tweet &#39;&amp;lt;link&#39;&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;Simple and elegant.&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Nov 2015 22:43:11 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/26/rendering-tweets-in-jekyll-octopress.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/26/rendering-tweets-in-jekyll-octopress.html</guid>
        
        
      </item>
    
      <item>
        <title>Changing Base Templates in Octopress</title>
        <description>&lt;p&gt;A couple of days ago I tweeted.&lt;/p&gt;

&lt;div class=&quot;embed twitter&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I like Octopress, I really do, but I have no idea where it&amp;#39;s generating this &amp;lt;head&amp;gt; tag from. Very confused.&lt;/p&gt;&amp;mdash; Arthur Maltson (@amaltson) &lt;a href=&quot;https://twitter.com/amaltson/status/668624566659362816&quot;&gt;November 23, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;The issue I ran into was trying to get a different &lt;code&gt;head.html&lt;/code&gt; to work with
&lt;a href=&quot;https://github.com/octopress/genesis-theme&quot;&gt;Octopress Genesis&lt;/a&gt;. Turns out that while Jekyll by default looks at
&lt;code&gt;_includes/head.html&lt;/code&gt;, when you use the Octopress Genesis, you make the
changes in the &lt;code&gt;_plugins/theme/includes&lt;/code&gt; directory which maps to the &lt;a href=&quot;https://github.com/octopress/genesis-theme/tree/master/assets/includes&quot;&gt;Octopress
Genesis includes&lt;/a&gt; directory under &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once I dropped a &lt;code&gt;head.html&lt;/code&gt; in &lt;code&gt;_plugins/theme/includes&lt;/code&gt; my new &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
elements were picked up.&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Nov 2015 23:00:27 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/24/changing-base-templates-in-octopress.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/24/changing-base-templates-in-octopress.html</guid>
        
        
      </item>
    
      <item>
        <title>Postgresql Accept All Connections</title>
        <description>&lt;p&gt;Today I was trying to make changes to a postgresql wrapper cookbook to get it to
accept connections from it’s hostname, but ran into issues when our recipes that
create databases tried to do it by talking to postgresql on localhost. Turns out
if you change postgresql’s &lt;code&gt;listen_address&lt;/code&gt; to the hostname, postgresql stops
listening on localhost.&lt;/p&gt;

&lt;p&gt;The solution is to change &lt;a href=&quot;https://github.com/hw-cookbooks/postgresql#configuration&quot;&gt;the listen address configuration&lt;/a&gt; to &lt;code&gt;&#39;*&#39;&lt;/code&gt;, which has
postgresql accept requests from anywhere.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Nov 2015 22:30:52 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/20/postgres-accept-all-connections.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/20/postgres-accept-all-connections.html</guid>
        
        
      </item>
    
      <item>
        <title>Not the Create Time You Were Looking For</title>
        <description>&lt;p&gt;For some reason I was always under the impression that the &lt;code&gt;find -ctime&lt;/code&gt; would
find files by their creation time. Unfortunately, &lt;a href=&quot;http://unix.stackexchange.com/a/91200/77793&quot;&gt;this is not the case&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The POSIX standard only defines three distinct timestamps to be stored for
each file: the time of last data access, the time of last data modification,
and the time the file status last changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, according to the man pages, &lt;code&gt;ctime&lt;/code&gt; is actually.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;File’s status was last changed n^24 hours ago. See the comments for -atime to
understand how rounding affects the interpretation of file status change
times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;File status changes can include the file itself changing or file attributes
(like permissions) changing. This means for your next find, the best you can do
is the modified time, i.e. &lt;code&gt;mtime&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Nov 2015 18:00:00 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/18/not-the-create-time-you-were-looking-for.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/18/not-the-create-time-you-were-looking-for.html</guid>
        
        
      </item>
    
      <item>
        <title>Automated Code Review</title>
        <description>&lt;p&gt;Listening to the &lt;a href=&quot;https://ruby5.codeschool.com/episodes/644-episode-601-november-17th-2015&quot;&gt;Ruby5 episode&lt;/a&gt; today, I learned about the &lt;a href=&quot;https://github.com/mmozuras/pronto&quot;&gt;Pronto&lt;/a&gt; gem which
can run multiple Ruby static analysis tools like &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;Rubocop&lt;/a&gt; and &lt;a href=&quot;https://github.com/seattlerb/flay&quot;&gt;Flay&lt;/a&gt; against
a Pull Request and then automatically comment about the violations straight on
GitHub. Pretty cool!&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Nov 2015 20:00:00 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/17/automated-code-review.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/17/automated-code-review.html</guid>
        
        
      </item>
    
      <item>
        <title>Redis Queue for HTTP Requests</title>
        <description>&lt;p&gt;I’m attending (and speaking) at &lt;a href=&quot;https://fsto.com&quot;&gt;Full Stack TO 2015&lt;/a&gt; this weekend and one of
the talks was from BrainTree. The speaker described how their custom built app
server, &lt;code&gt;broxy&lt;/code&gt; accepts all API requests from clients and then enqueue them
into Redis. Their Rails app would then dequeue and process those requests.
This let them take down the entire backend, have the Redis queue build up, and
then bring the backend back up and avoid any downtime.&lt;/p&gt;

&lt;p&gt;The speaker mentioned they ultimately got rid of their custom app server because
they had some issues and it was in general superseded by other tools (was it
maybe the Kafka implementation he mentioned?). Regardless, I thought this idea
was very novel.&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Nov 2015 23:01:46 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/14/redis-queue-for-http-requests.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/14/redis-queue-for-http-requests.html</guid>
        
        
      </item>
    
      <item>
        <title>Ubuntu Only: /etc/environment</title>
        <description>&lt;p&gt;Making sure environment variables are available to all users on Linux is a
common problem. One thing I learned from playing with &lt;a href=&quot;http://lattice.cf&quot;&gt;lattice.cf&lt;/a&gt; is dropping
environment variables in &lt;code&gt;/etc/environment&lt;/code&gt; is a really nice way to accomplish
that.&lt;/p&gt;

&lt;p&gt;However, as a coworker pointed out, &lt;code&gt;/etc/environment&lt;/code&gt; is an &lt;strong&gt;Ubuntu only&lt;/strong&gt;
concept, and does not translate to other distributions like Red Hat or CentOS.
Guess I’m stuck with &lt;code&gt;/etc/profile.d/&amp;lt;some-script&amp;gt;.sh&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Nov 2015 18:00:00 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/12/ubuntu-only-etc-environment.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/12/ubuntu-only-etc-environment.html</guid>
        
        
      </item>
    
      <item>
        <title>ElasticSearch Clusters Balance Data</title>
        <description>&lt;p&gt;Today I added a new ElasticSearch data node to our two node cluster and was
pleasantly surprised when disk usage on the original two nodes dropped by a
third. Turns out &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html#_shards_amp_replicas&quot;&gt;ElasticSearch distributes shards&lt;/a&gt; across all the data nodes.
Very cool!&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Nov 2015 21:34:47 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/11/elasticsearch-clusters-balance-data.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/11/elasticsearch-clusters-balance-data.html</guid>
        
        
      </item>
    
      <item>
        <title>Oh-my-zsh OS X Plugin</title>
        <description>&lt;p&gt;The &lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins#osx&quot;&gt;osx oh-my-zsh plugin&lt;/a&gt; unlocks a number of useful features ways of
interacting with Finder from the terminal. My favourite is &lt;code&gt;cdf&lt;/code&gt; to navigate
to the directory the current finder window is on.&lt;/p&gt;

</description>
        <pubDate>Tue, 10 Nov 2015 23:30:40 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/10/oh-my-zsh-os-x-plugin.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/10/oh-my-zsh-os-x-plugin.html</guid>
        
        
      </item>
    
      <item>
        <title>Three Steps to Be a Better Teacher</title>
        <description>&lt;p&gt;On the &lt;a href=&quot;https://devchat.tv/ruby-rogues/232-rr-teaching-and-how-we-can-all-do-more-to-teach-technical-topics-to-others-with-eric-normand&quot;&gt;Ruby Rogues Teaching episode&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 09 Nov 2015 18:00:00 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/09/three-steps-to-be-a-better-teacher.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/09/three-steps-to-be-a-better-teacher.html</guid>
        
        
      </item>
    
  </channel>
</rss>
