<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Today I Learned</title>
    <description>Microblog of something technical I learned today.
</description>
    <link>http://til.maltson.com/</link>
    <atom:link href="http://til.maltson.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 06 Jan 2016 22:48:29 -0500</pubDate>
    <lastBuildDate>Wed, 06 Jan 2016 22:48:29 -0500</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Fantastic Gem for CLI Applications</title>
        <description>&lt;p&gt;If you‚Äôre going to build a CLI application in Ruby, you owe it to yourself to
look into the &lt;a href=&quot;https://github.com/davetron5000/gli&quot;&gt;gli&lt;/a&gt; gem. Especially if you‚Äôre considering building a CLI
application that has subcommands, i.e. Git style. I‚Äôve done the &lt;a href=&quot;https://www.ruby-toolbox.com/categories/CLI_Option_Parsers&quot;&gt;research&lt;/a&gt; on
&lt;a href=&quot;https://www.ruby-toolbox.com/categories/scripting_frameworks&quot;&gt;Ruby Toolbox&lt;/a&gt; and came out with several options.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thor - this almost won out, but the help text didn‚Äôt cut it. Things like
&lt;code&gt;--help&lt;/code&gt; at the end of a subcommand don‚Äôt work either.&lt;/li&gt;
  &lt;li&gt;Slop - no support for subcommands in version 4.&lt;/li&gt;
  &lt;li&gt;Cocaine - no great help text, not fantastic for subcommands.&lt;/li&gt;
  &lt;li&gt;Trollop - Lacking in documentation, less active.&lt;/li&gt;
  &lt;li&gt;commander - not as active as I‚Äôd like, maintainer tj went to Node, then Go.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;gli&lt;/code&gt; gem seemed to have it all: subcommands, required args, global options
vs command options, and of course &lt;em&gt;very&lt;/em&gt; nice help output.&lt;/p&gt;

</description>
        <pubDate>Wed, 06 Jan 2016 22:30:46 -0500</pubDate>
        <link>http://til.maltson.com/2016/01/06/fantastic-gem-for-cli-applications.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2016/01/06/fantastic-gem-for-cli-applications.html</guid>
        
        
      </item>
    
      <item>
        <title>Wrap Existing Line in Vim</title>
        <description>&lt;p&gt;I write a lot of Markdown (including these posts) in my editor of choice, Vim. I
also like to stick with 80 character limit to all my text, so Vim autowraps at
80 characters. Sometimes I want to restructure some text, and making that text
wrap at 80 characters again turns out to be an annoying and manual task. That
is, until you read a &lt;a href=&quot;https://robots.thoughtbot.com/wrap-existing-text-at-80-characters-in-vim&quot;&gt;blog post from thoughtbot&lt;/a&gt; which introduces you to the
built in &lt;code&gt;gq&lt;/code&gt; reformat command in Vim.&lt;/p&gt;

&lt;p&gt;Simply select a bunch of text with &lt;code&gt;v&lt;/code&gt; or &lt;code&gt;V&lt;/code&gt;, type &lt;code&gt;gq&lt;/code&gt; and your lines are
rewrapped.  For best results, you can &lt;code&gt;J&lt;/code&gt; a bunch of poorly formatted lines
together into one line, then &lt;code&gt;V&lt;/code&gt; those lines and have &lt;code&gt;gq&lt;/code&gt; do its formatting
magic.&lt;/p&gt;

</description>
        <pubDate>Tue, 15 Dec 2015 21:53:54 -0500</pubDate>
        <link>http://til.maltson.com/2015/12/15/wrap-existing-line-in-vim.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/12/15/wrap-existing-line-in-vim.html</guid>
        
        
      </item>
    
      <item>
        <title>New Dependency Resolver for Chef</title>
        <description>&lt;p&gt;The Chef mailing list moved to a &lt;a href=&quot;https://discourse.chef.io&quot;&gt;Discourse forum&lt;/a&gt; a little while back, which
makes asking questions and having discussions a pleasure (I üíú  Discourse).&lt;/p&gt;

&lt;p&gt;We‚Äôve been having a bunch of problems resolving &lt;code&gt;Berkshelf&lt;/code&gt; and &lt;code&gt;chef-client&lt;/code&gt;
dependencies, so I decided to ask a question. The helpful &lt;a href=&quot;https://discourse.chef.io/t/strategies-for-debugging-with-dependency-resolution-issues/7366/4&quot;&gt;martinb3 pointed me
to Berkshelf master&lt;/a&gt;. It turns out, &lt;code&gt;Berkshelf&lt;/code&gt; is working on a new dependency
resolution system in the &lt;a href=&quot;https://github.com/berkshelf/solve&quot;&gt;solve gem&lt;/a&gt;. This new resolver is also written in pure
Ruby, which means no pesky C extensions via &lt;code&gt;gecode&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Mon, 14 Dec 2015 22:48:34 -0500</pubDate>
        <link>http://til.maltson.com/2015/12/14/new-dependency-resolver-for-chef.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/12/14/new-dependency-resolver-for-chef.html</guid>
        
        
      </item>
    
      <item>
        <title>OS X Vagrant Boxes</title>
        <description>&lt;p&gt;Last year while automating my OS X &lt;a href=&quot;https://github.com/amaltson/workstation&quot;&gt;workstation with Chef&lt;/a&gt;, I wanted to get a
Vagrant OS X machine to test the Chef recipes on. There didn‚Äôt seem to be an
easy way &lt;a href=&quot;http://ntk.me/2012/09/07/os-x-on-os-x/http://ntk.me/2012/09/07/os-x-on-os-x/&quot;&gt;at the time&lt;/a&gt;, so I left my cookbook untested üò≠üêº.&lt;/p&gt;

&lt;p&gt;Last week my buddy asked this very same question, are there any OS X Vagrant
boxes? As I typed the email saying there aren‚Äôt any, I decided to do a quick
search on &lt;a href=&quot;https://atlas.hashicorp.com&quot;&gt;Hashicorp‚Äôs Atlas&lt;/a&gt;. To my disbelief, there are actually &lt;a href=&quot;https://atlas.hashicorp.com/boxes/search?utf8=‚úì&amp;amp;sort=&amp;amp;provider=&amp;amp;q=os+x&quot;&gt;many OS X
Vagrant boxes&lt;/a&gt; hosted on Atlas. It turns out that because of the &lt;a href=&quot;https://github.com/AndrewDryga/vagrant-box-osx#os-x-licensing&quot;&gt;license
changes&lt;/a&gt;, running OS X virtual machines is easier than ever.&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Dec 2015 22:53:01 -0500</pubDate>
        <link>http://til.maltson.com/2015/12/01/os-x-vagrant-boxes.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/12/01/os-x-vagrant-boxes.html</guid>
        
        
      </item>
    
      <item>
        <title>Rendering Tweets in Jekyll/Octopress</title>
        <description>&lt;p&gt;In my &lt;a href=&quot;http://til.maltson.com/2015/11/24/changing-base-templates-in-octopress.html&quot;&gt;previous TIL&lt;/a&gt; I wanted to render a tweet I had made about Octopress. I
thought, surely there‚Äôs a way to do this in Jekyll. With the right keyword
searches on Google, I came across &lt;a href=&quot;https://github.com/rob-murray/jekyll-twitter-plugin&quot;&gt;jekyll-twitter-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After adding &lt;code&gt;jekyll-twitter-plugin&lt;/code&gt; to the &lt;code&gt;Gemfile&lt;/code&gt; and &lt;code&gt;_config.yml&lt;/code&gt;, you
need to go and get some Twitter API keys. Make sure not to commit these keys
to source control, I opted for the environment variable approach. With that in
place, you can now add a tweet with a simple &lt;code&gt;liquid&lt;/code&gt; tag like so:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
{% twitter oembed &amp;lt;link to tweet&amp;gt; %}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Simple and elegant.&lt;/p&gt;

</description>
        <pubDate>Thu, 26 Nov 2015 22:43:11 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/26/rendering-tweets-in-jekyll-octopress.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/26/rendering-tweets-in-jekyll-octopress.html</guid>
        
        
      </item>
    
      <item>
        <title>Changing Base Templates in Octopress</title>
        <description>&lt;p&gt;A couple of days ago I tweeted.&lt;/p&gt;

&lt;div class=&quot;embed twitter&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I like Octopress, I really do, but I have no idea where it&amp;#39;s generating this &amp;lt;head&amp;gt; tag from. Very confused.&lt;/p&gt;&amp;mdash; Arthur Maltson (@amaltson) &lt;a href=&quot;https://twitter.com/amaltson/status/668624566659362816&quot;&gt;November 23, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/div&gt;

&lt;p&gt;The issue I ran into was trying to get a different &lt;code&gt;head.html&lt;/code&gt; to work with
&lt;a href=&quot;https://github.com/octopress/genesis-theme&quot;&gt;Octopress Genesis&lt;/a&gt;. Turns out that while Jekyll by default looks at
&lt;code&gt;_includes/head.html&lt;/code&gt;, when you use the Octopress Genesis, you make the
changes in the &lt;code&gt;_plugins/theme/includes&lt;/code&gt; directory which maps to the &lt;a href=&quot;https://github.com/octopress/genesis-theme/tree/master/assets/includes&quot;&gt;Octopress
Genesis includes&lt;/a&gt; directory under &lt;code&gt;assets&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once I dropped a &lt;code&gt;head.html&lt;/code&gt; in &lt;code&gt;_plugins/theme/includes&lt;/code&gt; my new &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;
elements were picked up.&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Nov 2015 23:00:27 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/24/changing-base-templates-in-octopress.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/24/changing-base-templates-in-octopress.html</guid>
        
        
      </item>
    
      <item>
        <title>Postgresql Accept All Connections</title>
        <description>&lt;p&gt;Today I was trying to make changes to a postgresql wrapper cookbook to get it to
accept connections from it‚Äôs hostname, but ran into issues when our recipes that
create databases tried to do it by talking to postgresql on localhost. Turns out
if you change postgresql‚Äôs &lt;code&gt;listen_address&lt;/code&gt; to the hostname, postgresql stops
listening on localhost.&lt;/p&gt;

&lt;p&gt;The solution is to change &lt;a href=&quot;https://github.com/hw-cookbooks/postgresql#configuration&quot;&gt;the listen address configuration&lt;/a&gt; to &lt;code&gt;&#39;*&#39;&lt;/code&gt;, which has
postgresql accept requests from anywhere.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Nov 2015 22:30:52 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/20/postgres-accept-all-connections.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/20/postgres-accept-all-connections.html</guid>
        
        
      </item>
    
      <item>
        <title>Not the Create Time You Were Looking For</title>
        <description>&lt;p&gt;For some reason I was always under the impression that the &lt;code&gt;find -ctime&lt;/code&gt; would
find files by their creation time. Unfortunately, &lt;a href=&quot;http://unix.stackexchange.com/a/91200/77793&quot;&gt;this is not the case&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The POSIX standard only defines three distinct timestamps to be stored for
each file: the time of last data access, the time of last data modification,
and the time the file status last changed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As it turns out, according to the man pages, &lt;code&gt;ctime&lt;/code&gt; is actually.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;File‚Äôs status was last changed n^24 hours ago. See the comments for -atime to
understand how rounding affects the interpretation of file status change
times.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;File status changes can include the file itself changing or file attributes
(like permissions) changing. This means for your next find, the best you can do
is the modified time, i.e. &lt;code&gt;mtime&lt;/code&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 18 Nov 2015 18:00:00 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/18/not-the-create-time-you-were-looking-for.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/18/not-the-create-time-you-were-looking-for.html</guid>
        
        
      </item>
    
      <item>
        <title>Automated Code Review</title>
        <description>&lt;p&gt;Listening to the &lt;a href=&quot;https://ruby5.codeschool.com/episodes/644-episode-601-november-17th-2015&quot;&gt;Ruby5 episode&lt;/a&gt; today, I learned about the &lt;a href=&quot;https://github.com/mmozuras/pronto&quot;&gt;Pronto&lt;/a&gt; gem which
can run multiple Ruby static analysis tools like &lt;a href=&quot;https://github.com/bbatsov/rubocop&quot;&gt;Rubocop&lt;/a&gt; and &lt;a href=&quot;https://github.com/seattlerb/flay&quot;&gt;Flay&lt;/a&gt; against
a Pull Request and then automatically comment about the violations straight on
GitHub. Pretty cool!&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Nov 2015 20:00:00 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/17/automated-code-review.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/17/automated-code-review.html</guid>
        
        
      </item>
    
      <item>
        <title>Redis Queue for HTTP Requests</title>
        <description>&lt;p&gt;I‚Äôm attending (and speaking) at &lt;a href=&quot;https://fsto.com&quot;&gt;Full Stack TO 2015&lt;/a&gt; this weekend and one of
the talks was from BrainTree. The speaker described how their custom built app
server, &lt;code&gt;broxy&lt;/code&gt; accepts all API requests from clients and then enqueue them
into Redis. Their Rails app would then dequeue and process those requests.
This let them take down the entire backend, have the Redis queue build up, and
then bring the backend back up and avoid any downtime.&lt;/p&gt;

&lt;p&gt;The speaker mentioned they ultimately got rid of their custom app server because
they had some issues and it was in general superseded by other tools (was it
maybe the Kafka implementation he mentioned?). Regardless, I thought this idea
was very novel.&lt;/p&gt;

</description>
        <pubDate>Sat, 14 Nov 2015 23:01:46 -0500</pubDate>
        <link>http://til.maltson.com/2015/11/14/redis-queue-for-http-requests.html</link>
        <guid isPermaLink="true">http://til.maltson.com/2015/11/14/redis-queue-for-http-requests.html</guid>
        
        
      </item>
    
  </channel>
</rss>
